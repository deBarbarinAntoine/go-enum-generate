{{ define "enum" -}}
package enum

import (
    "fmt"
    "slices"
    "strings"
)

// This file has been created automatically by `go-enum-generate`
// DO NOT MODIFY NOR EDIT THIS FILE DIRECTLY.
// To modify this enum, edit the enums.json or enums.yaml definition file
// To know more about `go-enum-generate`, see go to `https://github.com/debarbarinantoine/go-enum-generate`
// Generated at: {{ humanDate .Date }}

type {{ .Name }} uint

const (
{{- $name := .Name -}}
{{- range $i, $val := .Values -}}
{{- if eq 0 $i }}
    {{ toPrivate $val.Key }} {{ $name }} = iota
{{- else }}
    {{ toPrivate $val.Key }}
{{- end -}}
{{- end }}
)

var {{ toPrivate .Name }}Keys = make(map[{{ .Name }}]struct{}, {{ len .Values }})
var {{ toPrivate .Name }}Values = make(map[string]{{ .Name }}, {{ len .Values }})
var {{ toPrivate .Name }}KeysArray = make([]{{ .Name }}, {{ len .Values }})
var {{ toPrivate .Name }}ValuesArray = make([]string, {{ len .Values }})

func init() {
{{- range $i, $value := .Values }}
    {{ toPrivate $name }}Keys[{{ toPrivate $value.Key }}] = struct{}{}
    {{ toPrivate $name }}KeysArray[{{ $i }}] = {{ toPrivate $value.Key }}
    {{ toPrivate $name }}Values["{{ $value.Value }}"] = {{ toPrivate $value.Key }}
    {{ toPrivate $name }}ValuesArray[{{ $i }}] = "{{ $value.Value }}"
{{ end -}}
}

func (e {{ .Name }}) String() string {
    switch e {
    {{- range .Values }}
        case {{ toPrivate .Key }}:
            return "{{ .Value }}"
    {{- end }}
        default:
            return fmt.Sprintf("Unknown {{ .Name }} (%d)", e.Value())
    }
}

func (e *{{ .Name }}) Parse(str string) error {

    str = strings.TrimSpace(str)

    if val, ok := {{ toPrivate .Name }}Values[str]; ok {
        *e = val
        return nil
    }
    return fmt.Errorf("invalid {{ .Name }}: %s", str)
}

func (e {{ .Name }}) Value() uint {
    return uint(e)
}

func (e {{ .Name }}) MarshalText() ([]byte, error) {
    return []byte(e.String()), nil
}

func (e *{{ .Name }}) UnmarshalText(text []byte) error {
    return e.Parse(string(text))
}

func (e {{ .Name }}) IsValid() bool {
    if _, ok := {{ toPrivate .Name }}Keys[e]; !ok {
        return false
    }
    return true
}

type {{ .EnumType }} struct {
{{- range .Values }}
    {{ .Key }} {{ $name -}}
{{ end }}
}

var {{ .EnumVar }} = {{ .EnumType }}{
{{- range .Values }}
    {{ .Key }}: {{ toPrivate .Key }},
{{- end }}
}

func (e {{ .EnumType }}) Values() []{{ .Name }} {
    return slices.Clone({{ toPrivate .Name }}KeysArray)
}

func (e {{ .EnumType }}) Args() []string {
    return slices.Clone({{ toPrivate .Name }}ValuesArray)
}

func (e {{ .EnumType }}) Description() string {
    var strBuilder strings.Builder
    strBuilder.WriteString("\tAvailable {{ .EnumVar }}:\n")
    for _, enumVal := range e.Values() {
        strBuilder.WriteString(fmt.Sprintf("=> %d -> %s\n", enumVal.Value(), enumVal.String()))
    }
    return strBuilder.String()
}

func (e {{ .EnumType }}) Cast(value uint) ({{ .Name }}, error) {
    if _, ok := {{ toPrivate .Name }}Keys[{{ .Name }}(value)]; !ok {
        return 0, fmt.Errorf("invalid cast {{ .Name }}: %d", value)
    }
    return {{ .Name }}(value), nil
}
{{ end }}